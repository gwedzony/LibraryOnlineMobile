// <auto-generated />
using System;
using Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BookCollection", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.Property<int>("CollectionsId")
                        .HasColumnType("int");

                    b.HasKey("BooksId", "CollectionsId");

                    b.HasIndex("CollectionsId");

                    b.ToTable("BookCollection");
                });

            modelBuilder.Entity("Database.Data.BookStructure.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("MobileBooksAuthorCardId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Database.Data.BookStructure.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AddDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int?>("BookCaseId")
                        .HasColumnType("int");

                    b.Property<int>("BookGenreId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("ReadCount")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookCaseId");

                    b.HasIndex("BookGenreId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Database.Data.BookStructure.BookCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CollectionId")
                        .HasColumnType("int");

                    b.Property<int?>("RandomMBooksCollectionCardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CollectionId");

                    b.HasIndex("RandomMBooksCollectionCardId");

                    b.ToTable("BooksCollections");
                });

            modelBuilder.Entity("Database.Data.BookStructure.BookGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Database.Data.BookStructure.Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CollectionImage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CollectionName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("RandomCollectionsMobilePageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("Database.Data.MobileApp.Bookcase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Bookcases");
                });

            modelBuilder.Entity("Database.Data.MobileApp.DetailBookMobilePage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.ToTable("DetailBookMobilePages");
                });

            modelBuilder.Entity("Database.Data.MobileApp.LatestMobileBooksCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.ToTable("LatestMobileBooksCard");
                });

            modelBuilder.Entity("Database.Data.MobileApp.MobileBooksAuthorCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .IsUnique();

                    b.ToTable("MobileBooksAuthorCard");
                });

            modelBuilder.Entity("Database.Data.MobileApp.RandomMCollectionCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CollectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId")
                        .IsUnique();

                    b.ToTable("RandomMBooksCollectionCards");
                });

            modelBuilder.Entity("BookCollection", b =>
                {
                    b.HasOne("Database.Data.BookStructure.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Data.BookStructure.Collection", null)
                        .WithMany()
                        .HasForeignKey("CollectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Data.BookStructure.Book", b =>
                {
                    b.HasOne("Database.Data.BookStructure.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Data.MobileApp.Bookcase", "Bookcase")
                        .WithMany("Books")
                        .HasForeignKey("BookCaseId");

                    b.HasOne("Database.Data.BookStructure.BookGenre", "BookGenre")
                        .WithMany("Books")
                        .HasForeignKey("BookGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("BookGenre");

                    b.Navigation("Bookcase");
                });

            modelBuilder.Entity("Database.Data.BookStructure.BookCollection", b =>
                {
                    b.HasOne("Database.Data.BookStructure.Book", "Book")
                        .WithMany("BookCollections")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Data.BookStructure.Collection", "Collection")
                        .WithMany("BookCollections")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Data.MobileApp.RandomMCollectionCard", "RandomMBooksCollectionCard")
                        .WithMany()
                        .HasForeignKey("RandomMBooksCollectionCardId");

                    b.Navigation("Book");

                    b.Navigation("Collection");

                    b.Navigation("RandomMBooksCollectionCard");
                });

            modelBuilder.Entity("Database.Data.MobileApp.DetailBookMobilePage", b =>
                {
                    b.HasOne("Database.Data.BookStructure.Book", "Book")
                        .WithOne("DetailBookMobilePages")
                        .HasForeignKey("Database.Data.MobileApp.DetailBookMobilePage", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Database.Data.MobileApp.LatestMobileBooksCard", b =>
                {
                    b.HasOne("Database.Data.BookStructure.Book", "Book")
                        .WithOne("LatestMobileBooksCard")
                        .HasForeignKey("Database.Data.MobileApp.LatestMobileBooksCard", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Database.Data.MobileApp.MobileBooksAuthorCard", b =>
                {
                    b.HasOne("Database.Data.BookStructure.Author", "Author")
                        .WithOne("MobileBooksAuthorCard")
                        .HasForeignKey("Database.Data.MobileApp.MobileBooksAuthorCard", "AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Database.Data.MobileApp.RandomMCollectionCard", b =>
                {
                    b.HasOne("Database.Data.BookStructure.Collection", "Collection")
                        .WithOne("RandomCollectionsMobilePage")
                        .HasForeignKey("Database.Data.MobileApp.RandomMCollectionCard", "CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("Database.Data.BookStructure.Author", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("MobileBooksAuthorCard");
                });

            modelBuilder.Entity("Database.Data.BookStructure.Book", b =>
                {
                    b.Navigation("BookCollections");

                    b.Navigation("DetailBookMobilePages");

                    b.Navigation("LatestMobileBooksCard");
                });

            modelBuilder.Entity("Database.Data.BookStructure.BookGenre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Database.Data.BookStructure.Collection", b =>
                {
                    b.Navigation("BookCollections");

                    b.Navigation("RandomCollectionsMobilePage");
                });

            modelBuilder.Entity("Database.Data.MobileApp.Bookcase", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
